/*
 * libajp13 - AjpReaderTest.java
 *
 * Copyright (c) 2015 Luca Carettoni 
 * Copyright (c) 2010 Espen Wiborg
 *
 * Licensed under the Apache License, Version 2.0
 */
package org.nibblesec.ajp13;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.junit.Assert.assertThat;
import org.junit.Test;

/**
 * Test cases for AJP message parsing
 */
public class AjpReaderTest
{

    @Test
    public void makeIntWorks() throws Exception
    {
        assertThat(AjpReader.makeInt(0, 1), is(1));
        assertThat(AjpReader.makeInt(1, 0), is(256));
    }

    @Test
    public void parseCping() throws Exception
    {
        byte[] cPing = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x00, (byte) 0x01, (byte) 0x0a};
        AjpMessage msg = AjpReader.parseMessage(cPing);
        assertThat(msg, instanceOf(CPingMessage.class));
    }

    @Test
    public void parseCpong() throws Exception
    {
        byte[] cPong = new byte[]{
            (byte) 0x41, (byte) 0x42, (byte) 0x00, (byte) 0x01, (byte) 0x09};
        AjpMessage msg = AjpReader.parseMessage(cPong);
        assertThat(msg, instanceOf(CPongMessage.class));
    }

    @Test
    public void parseShutdown() throws Exception
    {
        byte[] shutdown = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x00, (byte) 0x01, (byte) 0x07};
        AjpMessage msg = AjpReader.parseMessage(shutdown);
        assertThat(msg, instanceOf(ShutdownMessage.class));
    }

    @Test
    public void parsePing() throws Exception
    {
        byte[] ping = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x00, (byte) 0x01, (byte) 0x08};
        AjpMessage msg = AjpReader.parseMessage(ping);
        assertThat(msg, instanceOf(PingMessage.class));
    }

    @Test
    public void parseEndResponse() throws Exception
    {
        byte[] endResponse = new byte[]{
            (byte) 0x41, (byte) 0x42, (byte) 0x00, (byte) 0x02, (byte) 0x05, (byte) 0x00};
        AjpMessage msg = AjpReader.parseMessage(endResponse);
        assertThat(msg, instanceOf(EndResponseMessage.class));
    }

    @Test
    public void parseSendBodyChunk() throws Exception
    {
        byte[] sendBodyChunk = new byte[]{
            (byte) 0x41, (byte) 0x42, (byte) 0x00, (byte) 0x31, (byte) 0x03,
            (byte) 0x00, (byte) 0x2d, (byte) 0x83, (byte) 0x71, (byte) 0x5e,
            (byte) 0x60, (byte) 0xc6, (byte) 0x0c, (byte) 0x33, (byte) 0xc3,
            (byte) 0x39, (byte) 0x4d, (byte) 0x59, (byte) 0x5a, (byte) 0x6e,
            (byte) 0xe5, (byte) 0x35, (byte) 0x1d, (byte) 0xee, (byte) 0x4c,
            (byte) 0xfc, (byte) 0xd2, (byte) 0xbd, (byte) 0x45, (byte) 0x7f,
            (byte) 0xe9, (byte) 0xde, (byte) 0x72, (byte) 0xe9, (byte) 0x81,
            (byte) 0x41, (byte) 0x78, (byte) 0xfb, (byte) 0x5b, (byte) 0xab,
            (byte) 0x85, (byte) 0x34, (byte) 0xfe, (byte) 0x1f, (byte) 0xb9,
            (byte) 0xa9, (byte) 0x67, (byte) 0x69, (byte) 0x92, (byte) 0x7f,
            (byte) 0x00, (byte) 0x00, (byte) 0x00};
        AjpMessage msg = AjpReader.parseMessage(sendBodyChunk);
        assertThat(msg, instanceOf(SendBodyChunkMessage.class));
    }

    @Test
    public void parseSendHeaders() throws Exception
    {
        byte[] sendHeaders = new byte[]{
            (byte) 0x41, (byte) 0x42, (byte) 0x00, (byte) 0xc7, (byte) 0x04,
            (byte) 0x00, (byte) 0xc8, (byte) 0x00, (byte) 0x02, (byte) 0x4f,
            (byte) 0x4b, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xa0,
            (byte) 0x05, (byte) 0x00, (byte) 0x1d, (byte) 0x53, (byte) 0x75,
            (byte) 0x6e, (byte) 0x2c, (byte) 0x20, (byte) 0x30, (byte) 0x31,
            (byte) 0x20, (byte) 0x4d, (byte) 0x61, (byte) 0x72, (byte) 0x20,
            (byte) 0x32, (byte) 0x30, (byte) 0x31, (byte) 0x35, (byte) 0x20,
            (byte) 0x30, (byte) 0x36, (byte) 0x3a, (byte) 0x33, (byte) 0x31,
            (byte) 0x3a, (byte) 0x32, (byte) 0x31, (byte) 0x20, (byte) 0x47,
            (byte) 0x4d, (byte) 0x54, (byte) 0x00, (byte) 0x00, (byte) 0x07,
            (byte) 0x45, (byte) 0x78, (byte) 0x70, (byte) 0x69, (byte) 0x72,
            (byte) 0x65, (byte) 0x73, (byte) 0x00, (byte) 0x00, (byte) 0x1d,
            (byte) 0x54, (byte) 0x75, (byte) 0x65, (byte) 0x2c, (byte) 0x20,
            (byte) 0x32, (byte) 0x36, (byte) 0x20, (byte) 0x41, (byte) 0x70,
            (byte) 0x72, (byte) 0x20, (byte) 0x32, (byte) 0x30, (byte) 0x31,
            (byte) 0x36, (byte) 0x20, (byte) 0x30, (byte) 0x34, (byte) 0x3a,
            (byte) 0x32, (byte) 0x34, (byte) 0x3a, (byte) 0x33, (byte) 0x31,
            (byte) 0x20, (byte) 0x47, (byte) 0x4d, (byte) 0x54, (byte) 0x00,
            (byte) 0x00, (byte) 0x0d, (byte) 0x41, (byte) 0x63, (byte) 0x63,
            (byte) 0x65, (byte) 0x70, (byte) 0x74, (byte) 0x2d, (byte) 0x52,
            (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x65, (byte) 0x73,
            (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x62, (byte) 0x79,
            (byte) 0x74, (byte) 0x65, (byte) 0x73, (byte) 0x00, (byte) 0xa0,
            (byte) 0x01, (byte) 0x00, (byte) 0x09, (byte) 0x69, (byte) 0x6d,
            (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x2f, (byte) 0x70,
            (byte) 0x6e, (byte) 0x67, (byte) 0x00, (byte) 0x00, (byte) 0x16,
            (byte) 0x58, (byte) 0x2d, (byte) 0x43, (byte) 0x6f, (byte) 0x6e,
            (byte) 0x74, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x2d,
            (byte) 0x54, (byte) 0x79, (byte) 0x70, (byte) 0x65, (byte) 0x2d,
            (byte) 0x4f, (byte) 0x70, (byte) 0x74, (byte) 0x69, (byte) 0x6f,
            (byte) 0x6e, (byte) 0x73, (byte) 0x00, (byte) 0x00, (byte) 0x07,
            (byte) 0x6e, (byte) 0x6f, (byte) 0x73, (byte) 0x6e, (byte) 0x69,
            (byte) 0x66, (byte) 0x66, (byte) 0x00, (byte) 0xa0, (byte) 0x03,
            (byte) 0x00, (byte) 0x03, (byte) 0x38, (byte) 0x31, (byte) 0x34,
            (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x53, (byte) 0x65,
            (byte) 0x72, (byte) 0x76, (byte) 0x65, (byte) 0x72, (byte) 0x00,
            (byte) 0x00, (byte) 0x14, (byte) 0x53, (byte) 0x65, (byte) 0x72,
            (byte) 0x76, (byte) 0x65, (byte) 0x72, (byte) 0x3a, (byte) 0x20,
            (byte) 0x4a, (byte) 0x65, (byte) 0x74, (byte) 0x74, (byte) 0x79,
            (byte) 0x28, (byte) 0x37, (byte) 0x2e, (byte) 0x78, (byte) 0x2e,
            (byte) 0x78, (byte) 0x29, (byte) 0x00};
        AjpMessage msg = AjpReader.parseMessage(sendHeaders);
        assertThat(msg, instanceOf(SendHeadersMessage.class));
        assertThat(msg.getDescription(), is("Send the response headers from the servlet container to the web server.\n"
                + "Content:\n"
                + "200 OK\n"
                + "Headers:\n"
                + "last-modified: Sun, 01 Mar 2015 06:31:21 GMT\n"
                + "Expires: Tue, 26 Apr 2016 04:24:31 GMT\n"
                + "Accept-Ranges: bytes\n"
                + "content-type: image/png\n"
                + "X-Content-Type-Options: nosniff\n"
                + "content-length: 814\n"
                + "Server: Server: Jetty(7.x.x)\n"));
    }

    @Test
    public void parseGetBodyChunk() throws Exception
    {
        byte[] endResponse = new byte[]{
            (byte) 0x41, (byte) 0x42, (byte) 0x00, (byte) 0x03, (byte) 0x06, (byte) 0x1f, (byte) 0xf9};
        AjpMessage msg = AjpReader.parseMessage(endResponse);
        assertThat(msg, instanceOf(GetBodyChunkMessage.class));
        assertThat(msg.getDescription(), is("Get further data (8185 bytes) from the request if it hasn't all been transferred yet"));
    }

    @Test
    public void parseBody() throws Exception
    {
        byte[] body = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x00, (byte) 0x1d, (byte) 0x00,
            (byte) 0x1b, (byte) 0x6a, (byte) 0x5f, (byte) 0x75, (byte) 0x73,
            (byte) 0x65, (byte) 0x72, (byte) 0x6e, (byte) 0x61, (byte) 0x6d,
            (byte) 0x65, (byte) 0x3d, (byte) 0x41, (byte) 0x41, (byte) 0x41,
            (byte) 0x41, (byte) 0x26, (byte) 0x6a, (byte) 0x5f, (byte) 0x70,
            (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x77, (byte) 0x6f,
            (byte) 0x72, (byte) 0x64, (byte) 0x3d};
        AjpMessage msg = AjpReader.parseMessage(body);
        assertThat(msg, instanceOf(BodyMessage.class));
        assertThat(msg.getDescription(), is("Remaining request body data.\n"
                + "Content (HEX):\n"
                + "0x6A5F757365726E616D653D41414141266A5F70617373776F72643D\n"
                + "Content (Ascii):\nj_username=AAAA&j_password="));
    }

    @Test
    public void parseForwardRequestGet() throws Exception
    {
        byte[] forwardRequestGet = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x02, (byte) 0x7b, (byte) 0x02, (byte) 0x02,
            (byte) 0x00, (byte) 0x08, (byte) 0x48, (byte) 0x54, (byte) 0x54, (byte) 0x50,
            (byte) 0x2f, (byte) 0x31, (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0x00,
            (byte) 0x1f, (byte) 0x2f, (byte) 0x65, (byte) 0x78, (byte) 0x61, (byte) 0x6d,
            (byte) 0x70, (byte) 0x6c, (byte) 0x65, (byte) 0x73, (byte) 0x2f, (byte) 0x6a,
            (byte) 0x73, (byte) 0x70, (byte) 0x2f, (byte) 0x70, (byte) 0x6c, (byte) 0x75,
            (byte) 0x67, (byte) 0x69, (byte) 0x6e, (byte) 0x2f, (byte) 0x70, (byte) 0x6c,
            (byte) 0x75, (byte) 0x67, (byte) 0x69, (byte) 0x6e, (byte) 0x2e, (byte) 0x6a,
            (byte) 0x73, (byte) 0x70, (byte) 0x00, (byte) 0x00, (byte) 0x09, (byte) 0x31,
            (byte) 0x32, (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x30,
            (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0xff, (byte) 0xff, (byte) 0x00,
            (byte) 0x09, (byte) 0x31, (byte) 0x32, (byte) 0x37, (byte) 0x2e, (byte) 0x30,
            (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0x1f,
            (byte) 0x4a, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0xa0, (byte) 0x0b,
            (byte) 0x00, (byte) 0x0e, (byte) 0x31, (byte) 0x32, (byte) 0x37, (byte) 0x2e,
            (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x31, (byte) 0x3a,
            (byte) 0x38, (byte) 0x30, (byte) 0x31, (byte) 0x30, (byte) 0x00, (byte) 0xa0,
            (byte) 0x06, (byte) 0x00, (byte) 0x0a, (byte) 0x6b, (byte) 0x65, (byte) 0x65,
            (byte) 0x70, (byte) 0x2d, (byte) 0x61, (byte) 0x6c, (byte) 0x69, (byte) 0x76,
            (byte) 0x65, (byte) 0x00, (byte) 0xa0, (byte) 0x01, (byte) 0x00, (byte) 0x4a,
            (byte) 0x74, (byte) 0x65, (byte) 0x78, (byte) 0x74, (byte) 0x2f, (byte) 0x68,
            (byte) 0x74, (byte) 0x6d, (byte) 0x6c, (byte) 0x2c, (byte) 0x61, (byte) 0x70,
            (byte) 0x70, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x61, (byte) 0x74,
            (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x2f, (byte) 0x78, (byte) 0x68,
            (byte) 0x74, (byte) 0x6d, (byte) 0x6c, (byte) 0x2b, (byte) 0x78, (byte) 0x6d,
            (byte) 0x6c, (byte) 0x2c, (byte) 0x61, (byte) 0x70, (byte) 0x70, (byte) 0x6c,
            (byte) 0x69, (byte) 0x63, (byte) 0x61, (byte) 0x74, (byte) 0x69, (byte) 0x6f,
            (byte) 0x6e, (byte) 0x2f, (byte) 0x78, (byte) 0x6d, (byte) 0x6c, (byte) 0x3b,
            (byte) 0x71, (byte) 0x3d, (byte) 0x30, (byte) 0x2e, (byte) 0x39, (byte) 0x2c,
            (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x65, (byte) 0x2f,
            (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x70, (byte) 0x2c, (byte) 0x2a,
            (byte) 0x2f, (byte) 0x2a, (byte) 0x3b, (byte) 0x71, (byte) 0x3d, (byte) 0x30,
            (byte) 0x2e, (byte) 0x38, (byte) 0x00, (byte) 0xa0, (byte) 0x0e, (byte) 0x00,
            (byte) 0x87, (byte) 0x4d, (byte) 0x6f, (byte) 0x7a, (byte) 0x69, (byte) 0x6c,
            (byte) 0x6c, (byte) 0x61, (byte) 0x2f, (byte) 0x35, (byte) 0x2e, (byte) 0x30,
            (byte) 0x20, (byte) 0x28, (byte) 0x58, (byte) 0x31, (byte) 0x31, (byte) 0x3b,
            (byte) 0x20, (byte) 0x4c, (byte) 0x69, (byte) 0x6e, (byte) 0x75, (byte) 0x78,
            (byte) 0x20, (byte) 0x78, (byte) 0x38, (byte) 0x36, (byte) 0x5f, (byte) 0x36,
            (byte) 0x34, (byte) 0x29, (byte) 0x20, (byte) 0x41, (byte) 0x70, (byte) 0x70,
            (byte) 0x6c, (byte) 0x65, (byte) 0x57, (byte) 0x65, (byte) 0x62, (byte) 0x4b,
            (byte) 0x69, (byte) 0x74, (byte) 0x2f, (byte) 0x35, (byte) 0x33, (byte) 0x37,
            (byte) 0x2e, (byte) 0x33, (byte) 0x36, (byte) 0x20, (byte) 0x28, (byte) 0x4b,
            (byte) 0x48, (byte) 0x54, (byte) 0x4d, (byte) 0x4c, (byte) 0x2c, (byte) 0x20,
            (byte) 0x6c, (byte) 0x69, (byte) 0x6b, (byte) 0x65, (byte) 0x20, (byte) 0x47,
            (byte) 0x65, (byte) 0x63, (byte) 0x6b, (byte) 0x6f, (byte) 0x29, (byte) 0x20,
            (byte) 0x55, (byte) 0x62, (byte) 0x75, (byte) 0x6e, (byte) 0x74, (byte) 0x75,
            (byte) 0x20, (byte) 0x43, (byte) 0x68, (byte) 0x72, (byte) 0x6f, (byte) 0x6d,
            (byte) 0x69, (byte) 0x75, (byte) 0x6d, (byte) 0x2f, (byte) 0x33, (byte) 0x37,
            (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x32, (byte) 0x30, (byte) 0x36,
            (byte) 0x32, (byte) 0x2e, (byte) 0x31, (byte) 0x32, (byte) 0x30, (byte) 0x20,
            (byte) 0x43, (byte) 0x68, (byte) 0x72, (byte) 0x6f, (byte) 0x6d, (byte) 0x65,
            (byte) 0x2f, (byte) 0x33, (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e,
            (byte) 0x32, (byte) 0x30, (byte) 0x36, (byte) 0x32, (byte) 0x2e, (byte) 0x31,
            (byte) 0x32, (byte) 0x30, (byte) 0x20, (byte) 0x53, (byte) 0x61, (byte) 0x66,
            (byte) 0x61, (byte) 0x72, (byte) 0x69, (byte) 0x2f, (byte) 0x35, (byte) 0x33,
            (byte) 0x37, (byte) 0x2e, (byte) 0x33, (byte) 0x36, (byte) 0x00, (byte) 0xa0,
            (byte) 0x0d, (byte) 0x00, (byte) 0x23, (byte) 0x68, (byte) 0x74, (byte) 0x74,
            (byte) 0x70, (byte) 0x3a, (byte) 0x2f, (byte) 0x2f, (byte) 0x31, (byte) 0x32,
            (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e,
            (byte) 0x31, (byte) 0x3a, (byte) 0x38, (byte) 0x30, (byte) 0x31, (byte) 0x30,
            (byte) 0x2f, (byte) 0x65, (byte) 0x78, (byte) 0x61, (byte) 0x6d, (byte) 0x70,
            (byte) 0x6c, (byte) 0x65, (byte) 0x73, (byte) 0x2f, (byte) 0x6a, (byte) 0x73,
            (byte) 0x70, (byte) 0x2f, (byte) 0x00, (byte) 0xa0, (byte) 0x03, (byte) 0x00,
            (byte) 0x11, (byte) 0x67, (byte) 0x7a, (byte) 0x69, (byte) 0x70, (byte) 0x2c,
            (byte) 0x64, (byte) 0x65, (byte) 0x66, (byte) 0x6c, (byte) 0x61, (byte) 0x74,
            (byte) 0x65, (byte) 0x2c, (byte) 0x73, (byte) 0x64, (byte) 0x63, (byte) 0x68,
            (byte) 0x00, (byte) 0xa0, (byte) 0x04, (byte) 0x00, (byte) 0x17, (byte) 0x65,
            (byte) 0x6e, (byte) 0x2d, (byte) 0x55, (byte) 0x53, (byte) 0x2c, (byte) 0x65,
            (byte) 0x6e, (byte) 0x3b, (byte) 0x71, (byte) 0x3d, (byte) 0x30, (byte) 0x2e,
            (byte) 0x38, (byte) 0x2c, (byte) 0x69, (byte) 0x74, (byte) 0x3b, (byte) 0x71,
            (byte) 0x3d, (byte) 0x30, (byte) 0x2e, (byte) 0x36, (byte) 0x00, (byte) 0xa0,
            (byte) 0x09, (byte) 0x00, (byte) 0xb5, (byte) 0x4a, (byte) 0x53, (byte) 0x45,
            (byte) 0x53, (byte) 0x53, (byte) 0x49, (byte) 0x4f, (byte) 0x4e, (byte) 0x49,
            (byte) 0x44, (byte) 0x3d, (byte) 0x30, (byte) 0x36, (byte) 0x36, (byte) 0x46,
            (byte) 0x30, (byte) 0x33, (byte) 0x46, (byte) 0x41, (byte) 0x35, (byte) 0x30,
            (byte) 0x39, (byte) 0x46, (byte) 0x36, (byte) 0x35, (byte) 0x37, (byte) 0x32,
            (byte) 0x36, (byte) 0x45, (byte) 0x43, (byte) 0x42, (byte) 0x36, (byte) 0x35,
            (byte) 0x43, (byte) 0x33, (byte) 0x41, (byte) 0x34, (byte) 0x44, (byte) 0x36,
            (byte) 0x30, (byte) 0x42, (byte) 0x38, (byte) 0x43, (byte) 0x3b, (byte) 0x20,
            (byte) 0x4a, (byte) 0x53, (byte) 0x45, (byte) 0x53, (byte) 0x53, (byte) 0x49,
            (byte) 0x4f, (byte) 0x4e, (byte) 0x49, (byte) 0x44, (byte) 0x2e, (byte) 0x38,
            (byte) 0x39, (byte) 0x61, (byte) 0x66, (byte) 0x30, (byte) 0x38, (byte) 0x34,
            (byte) 0x30, (byte) 0x3d, (byte) 0x31, (byte) 0x6f, (byte) 0x6a, (byte) 0x7a,
            (byte) 0x31, (byte) 0x67, (byte) 0x66, (byte) 0x32, (byte) 0x78, (byte) 0x36,
            (byte) 0x36, (byte) 0x36, (byte) 0x65, (byte) 0x6b, (byte) 0x78, (byte) 0x37,
            (byte) 0x65, (byte) 0x68, (byte) 0x73, (byte) 0x6f, (byte) 0x70, (byte) 0x36,
            (byte) 0x76, (byte) 0x39, (byte) 0x61, (byte) 0x3b, (byte) 0x20, (byte) 0x4a,
            (byte) 0x53, (byte) 0x45, (byte) 0x53, (byte) 0x53, (byte) 0x49, (byte) 0x4f,
            (byte) 0x4e, (byte) 0x49, (byte) 0x44, (byte) 0x2e, (byte) 0x36, (byte) 0x36,
            (byte) 0x32, (byte) 0x37, (byte) 0x66, (byte) 0x62, (byte) 0x64, (byte) 0x38,
            (byte) 0x3d, (byte) 0x31, (byte) 0x66, (byte) 0x66, (byte) 0x36, (byte) 0x63,
            (byte) 0x33, (byte) 0x38, (byte) 0x75, (byte) 0x35, (byte) 0x64, (byte) 0x6c,
            (byte) 0x67, (byte) 0x68, (byte) 0x31, (byte) 0x74, (byte) 0x6d, (byte) 0x35,
            (byte) 0x39, (byte) 0x38, (byte) 0x6d, (byte) 0x66, (byte) 0x71, (byte) 0x33,
            (byte) 0x68, (byte) 0x30, (byte) 0x71, (byte) 0x3b, (byte) 0x20, (byte) 0x73,
            (byte) 0x63, (byte) 0x72, (byte) 0x65, (byte) 0x65, (byte) 0x6e, (byte) 0x52,
            (byte) 0x65, (byte) 0x73, (byte) 0x6f, (byte) 0x6c, (byte) 0x75, (byte) 0x74,
            (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x3d, (byte) 0x31, (byte) 0x36,
            (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x39, (byte) 0x30, (byte) 0x30,
            (byte) 0x3b, (byte) 0x20, (byte) 0x69, (byte) 0x63, (byte) 0x6f, (byte) 0x6e,
            (byte) 0x53, (byte) 0x69, (byte) 0x7a, (byte) 0x65, (byte) 0x3d, (byte) 0x32,
            (byte) 0x34, (byte) 0x78, (byte) 0x32, (byte) 0x34, (byte) 0x00, (byte) 0x0a,
            (byte) 0x00, (byte) 0x0f, (byte) 0x41, (byte) 0x4a, (byte) 0x50, (byte) 0x5f,
            (byte) 0x52, (byte) 0x45, (byte) 0x4d, (byte) 0x4f, (byte) 0x54, (byte) 0x45,
            (byte) 0x5f, (byte) 0x50, (byte) 0x4f, (byte) 0x52, (byte) 0x54, (byte) 0x00,
            (byte) 0x00, (byte) 0x05, (byte) 0x34, (byte) 0x30, (byte) 0x37, (byte) 0x36,
            (byte) 0x31, (byte) 0x00, (byte) 0xff};
        AjpMessage msg = AjpReader.parseMessage(forwardRequestGet);
        assertThat(msg, instanceOf(ForwardRequestMessage.class));
        assertThat(msg.getDescription(), is("Begin the request-processing cycle with the following data.\n"
                + "Method: 2\n"
                + "Protocol: HTTP/1.1\n"
                + "RequestUri: /examples/jsp/plugin/plugin.jsp\n"
                + "RemoteAddr: 127.0.0.1\n"
                + "RemoteHost: \n"
                + "ServerName: 127.0.0.1\n"
                + "ServerPort: 8010\n"
                + "isSsl: false\n"
                + "Header: host 127.0.0.1:8010\n"
                + "Header: connection keep-alive\n"
                + "Header: accept text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n"
                + "Header: user-agent Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36\n"
                + "Header: referer http://127.0.0.1:8010/examples/jsp/\n"
                + "Header: accept-encoding gzip,deflate,sdch\n"
                + "Header: accept-language en-US,en;q=0.8,it;q=0.6\n"
                + "Header: cookie JSESSIONID=066F03FA509F65726ECB65C3A4D60B8C; JSESSIONID.89af0840=1ojz1gf2x666ekx7ehsop6v9a; JSESSIONID.6627fbd8=1ff6c38u5dlgh1tm598mfq3h0q; screenResolution=1600x900; iconSize=24x24\n"
                + "Attribute: AJP_REMOTE_PORT 40761\n"));
    }

    @Test
    public void parseForwardRequestPost() throws Exception
    {
        byte[] forwardRequestPost = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x01, (byte) 0x1f, (byte) 0x02, (byte) 0x04,
            (byte) 0x00, (byte) 0x08, (byte) 0x48, (byte) 0x54, (byte) 0x54, (byte) 0x50,
            (byte) 0x2f, (byte) 0x31, (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0x00,
            (byte) 0x25, (byte) 0x2f, (byte) 0x69, (byte) 0x64, (byte) 0x6d, (byte) 0x2d,
            (byte) 0x62, (byte) 0x61, (byte) 0x63, (byte) 0x6b, (byte) 0x65, (byte) 0x6e,
            (byte) 0x64, (byte) 0x2f, (byte) 0x4d, (byte) 0x65, (byte) 0x74, (byte) 0x61,
            (byte) 0x44, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x52, (byte) 0x65,
            (byte) 0x74, (byte) 0x72, (byte) 0x69, (byte) 0x65, (byte) 0x76, (byte) 0x61,
            (byte) 0x6c, (byte) 0x53, (byte) 0x65, (byte) 0x72, (byte) 0x76, (byte) 0x69,
            (byte) 0x63, (byte) 0x65, (byte) 0x00, (byte) 0x00, (byte) 0x0a, (byte) 0x31,
            (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e,
            (byte) 0x31, (byte) 0x31, (byte) 0x38, (byte) 0x00, (byte) 0xff, (byte) 0xff,
            (byte) 0x00, (byte) 0x11, (byte) 0x69, (byte) 0x64, (byte) 0x6d, (byte) 0x2e,
            (byte) 0x65, (byte) 0x61, (byte) 0x2d, (byte) 0x65, (byte) 0x2e, (byte) 0x64,
            (byte) 0x63, (byte) 0x2d, (byte) 0x6f, (byte) 0x73, (byte) 0x2e, (byte) 0x64,
            (byte) 0x65, (byte) 0x00, (byte) 0x1f, (byte) 0x90, (byte) 0x00, (byte) 0x00,
            (byte) 0x09, (byte) 0xa0, (byte) 0x07, (byte) 0x00, (byte) 0x17, (byte) 0x74,
            (byte) 0x65, (byte) 0x78, (byte) 0x74, (byte) 0x2f, (byte) 0x78, (byte) 0x6d,
            (byte) 0x6c, (byte) 0x3b, (byte) 0x20, (byte) 0x63, (byte) 0x68, (byte) 0x61,
            (byte) 0x72, (byte) 0x73, (byte) 0x65, (byte) 0x74, (byte) 0x3d, (byte) 0x55,
            (byte) 0x54, (byte) 0x46, (byte) 0x2d, (byte) 0x38, (byte) 0x00, (byte) 0x00,
            (byte) 0x0a, (byte) 0x53, (byte) 0x4f, (byte) 0x41, (byte) 0x50, (byte) 0x41,
            (byte) 0x63, (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x00,
            (byte) 0x00, (byte) 0x02, (byte) 0x22, (byte) 0x22, (byte) 0x00, (byte) 0xa0,
            (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x2a, (byte) 0x00, (byte) 0x00,
            (byte) 0x0d, (byte) 0x43, (byte) 0x61, (byte) 0x63, (byte) 0x68, (byte) 0x65,
            (byte) 0x2d, (byte) 0x43, (byte) 0x6f, (byte) 0x6e, (byte) 0x74, (byte) 0x72,
            (byte) 0x6f, (byte) 0x6c, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x6e,
            (byte) 0x6f, (byte) 0x2d, (byte) 0x63, (byte) 0x61, (byte) 0x63, (byte) 0x68,
            (byte) 0x65, (byte) 0x00, (byte) 0xa0, (byte) 0x0c, (byte) 0x00, (byte) 0x08,
            (byte) 0x6e, (byte) 0x6f, (byte) 0x2d, (byte) 0x63, (byte) 0x61, (byte) 0x63,
            (byte) 0x68, (byte) 0x65, (byte) 0x00, (byte) 0xa0, (byte) 0x0e, (byte) 0x00,
            (byte) 0x0d, (byte) 0x4a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f,
            (byte) 0x31, (byte) 0x2e, (byte) 0x36, (byte) 0x2e, (byte) 0x30, (byte) 0x5f,
            (byte) 0x31, (byte) 0x33, (byte) 0x00, (byte) 0xa0, (byte) 0x0b, (byte) 0x00,
            (byte) 0x16, (byte) 0x69, (byte) 0x64, (byte) 0x6d, (byte) 0x2e, (byte) 0x65,
            (byte) 0x61, (byte) 0x2d, (byte) 0x65, (byte) 0x2e, (byte) 0x64, (byte) 0x63,
            (byte) 0x2d, (byte) 0x6f, (byte) 0x73, (byte) 0x2e, (byte) 0x64, (byte) 0x65,
            (byte) 0x3a, (byte) 0x38, (byte) 0x30, (byte) 0x38, (byte) 0x30, (byte) 0x00,
            (byte) 0xa0, (byte) 0x06, (byte) 0x00, (byte) 0x0a, (byte) 0x6b, (byte) 0x65,
            (byte) 0x65, (byte) 0x70, (byte) 0x2d, (byte) 0x61, (byte) 0x6c, (byte) 0x69,
            (byte) 0x76, (byte) 0x65, (byte) 0x00, (byte) 0x00, (byte) 0x11, (byte) 0x54,
            (byte) 0x72, (byte) 0x61, (byte) 0x6e, (byte) 0x73, (byte) 0x66, (byte) 0x65,
            (byte) 0x72, (byte) 0x2d, (byte) 0x45, (byte) 0x6e, (byte) 0x63, (byte) 0x6f,
            (byte) 0x64, (byte) 0x69, (byte) 0x6e, (byte) 0x67, (byte) 0x00, (byte) 0x00,
            (byte) 0x07, (byte) 0x63, (byte) 0x68, (byte) 0x75, (byte) 0x6e, (byte) 0x6b,
            (byte) 0x65, (byte) 0x64, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x07,
            (byte) 0x77, (byte) 0x72, (byte) 0x6b, (byte) 0x49, (byte) 0x64, (byte) 0x6d,
            (byte) 0x31, (byte) 0x00, (byte) 0xff};
        AjpMessage msg = AjpReader.parseMessage(forwardRequestPost);
        assertThat(msg, instanceOf(ForwardRequestMessage.class));
        assertThat(msg.getDescription(), is("Begin the request-processing cycle with the following data.\n"
                + "Method: 4\n"
                + "Protocol: HTTP/1.1\n"
                + "RequestUri: /idm-backend/MetaDataRetrievalService\n"
                + "RemoteAddr: 10.0.0.118\n"
                + "RemoteHost: \n"
                + "ServerName: idm.ea-e.dc-os.de\n"
                + "ServerPort: 8080\n"
                + "isSsl: false\n"
                + "Header: content-type text/xml; charset=UTF-8\n"
                + "Header: SOAPAction \"\"\n"
                + "Header: accept *\n"
                + "Header: Cache-Control no-cache\n"
                + "Header: pragma no-cache\n"
                + "Header: user-agent Java/1.6.0_13\n"
                + "Header: host idm.ea-e.dc-os.de:8080\n"
                + "Header: connection keep-alive\n"
                + "Header: Transfer-Encoding chunked\n"
                + "Attribute: route wrkIdm1\n"));
    }

    @Test
    public void parseForwardRequestAnotherGet() throws Exception
    {
        byte[] forwardRequestAnotherGet = new byte[]{
            (byte) 0x12, (byte) 0x34, (byte) 0x02, (byte) 0x73, (byte) 0x02, (byte) 0x02,
            (byte) 0x00, (byte) 0x08, (byte) 0x48, (byte) 0x54, (byte) 0x54, (byte) 0x50,
            (byte) 0x2f, (byte) 0x31, (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0x00,
            (byte) 0x08, (byte) 0x2f, (byte) 0x73, (byte) 0x65, (byte) 0x61, (byte) 0x72,
            (byte) 0x63, (byte) 0x68, (byte) 0x2f, (byte) 0x00, (byte) 0x00, (byte) 0x09,
            (byte) 0x31, (byte) 0x32, (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e,
            (byte) 0x30, (byte) 0x2e, (byte) 0x31, (byte) 0x00, (byte) 0xff, (byte) 0xff,
            (byte) 0x00, (byte) 0x09, (byte) 0x31, (byte) 0x32, (byte) 0x37, (byte) 0x2e,
            (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x31, (byte) 0x00,
            (byte) 0x1f, (byte) 0x4a, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0xa0,
            (byte) 0x0b, (byte) 0x00, (byte) 0x0e, (byte) 0x31, (byte) 0x32, (byte) 0x37,
            (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x31,
            (byte) 0x3a, (byte) 0x38, (byte) 0x30, (byte) 0x31, (byte) 0x30, (byte) 0x00,
            (byte) 0xa0, (byte) 0x06, (byte) 0x00, (byte) 0x0a, (byte) 0x6b, (byte) 0x65,
            (byte) 0x65, (byte) 0x70, (byte) 0x2d, (byte) 0x61, (byte) 0x6c, (byte) 0x69,
            (byte) 0x76, (byte) 0x65, (byte) 0x00, (byte) 0xa0, (byte) 0x01, (byte) 0x00,
            (byte) 0x4a, (byte) 0x74, (byte) 0x65, (byte) 0x78, (byte) 0x74, (byte) 0x2f,
            (byte) 0x68, (byte) 0x74, (byte) 0x6d, (byte) 0x6c, (byte) 0x2c, (byte) 0x61,
            (byte) 0x70, (byte) 0x70, (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x61,
            (byte) 0x74, (byte) 0x69, (byte) 0x6f, (byte) 0x6e, (byte) 0x2f, (byte) 0x78,
            (byte) 0x68, (byte) 0x74, (byte) 0x6d, (byte) 0x6c, (byte) 0x2b, (byte) 0x78,
            (byte) 0x6d, (byte) 0x6c, (byte) 0x2c, (byte) 0x61, (byte) 0x70, (byte) 0x70,
            (byte) 0x6c, (byte) 0x69, (byte) 0x63, (byte) 0x61, (byte) 0x74, (byte) 0x69,
            (byte) 0x6f, (byte) 0x6e, (byte) 0x2f, (byte) 0x78, (byte) 0x6d, (byte) 0x6c,
            (byte) 0x3b, (byte) 0x71, (byte) 0x3d, (byte) 0x30, (byte) 0x2e, (byte) 0x39,
            (byte) 0x2c, (byte) 0x69, (byte) 0x6d, (byte) 0x61, (byte) 0x67, (byte) 0x65,
            (byte) 0x2f, (byte) 0x77, (byte) 0x65, (byte) 0x62, (byte) 0x70, (byte) 0x2c,
            (byte) 0x2a, (byte) 0x2f, (byte) 0x2a, (byte) 0x3b, (byte) 0x71, (byte) 0x3d,
            (byte) 0x30, (byte) 0x2e, (byte) 0x38, (byte) 0x00, (byte) 0xa0, (byte) 0x0e,
            (byte) 0x00, (byte) 0x87, (byte) 0x4d, (byte) 0x6f, (byte) 0x7a, (byte) 0x69,
            (byte) 0x6c, (byte) 0x6c, (byte) 0x61, (byte) 0x2f, (byte) 0x35, (byte) 0x2e,
            (byte) 0x30, (byte) 0x20, (byte) 0x28, (byte) 0x58, (byte) 0x31, (byte) 0x31,
            (byte) 0x3b, (byte) 0x20, (byte) 0x4c, (byte) 0x69, (byte) 0x6e, (byte) 0x75,
            (byte) 0x78, (byte) 0x20, (byte) 0x78, (byte) 0x38, (byte) 0x36, (byte) 0x5f,
            (byte) 0x36, (byte) 0x34, (byte) 0x29, (byte) 0x20, (byte) 0x41, (byte) 0x70,
            (byte) 0x70, (byte) 0x6c, (byte) 0x65, (byte) 0x57, (byte) 0x65, (byte) 0x62,
            (byte) 0x4b, (byte) 0x69, (byte) 0x74, (byte) 0x2f, (byte) 0x35, (byte) 0x33,
            (byte) 0x37, (byte) 0x2e, (byte) 0x33, (byte) 0x36, (byte) 0x20, (byte) 0x28,
            (byte) 0x4b, (byte) 0x48, (byte) 0x54, (byte) 0x4d, (byte) 0x4c, (byte) 0x2c,
            (byte) 0x20, (byte) 0x6c, (byte) 0x69, (byte) 0x6b, (byte) 0x65, (byte) 0x20,
            (byte) 0x47, (byte) 0x65, (byte) 0x63, (byte) 0x6b, (byte) 0x6f, (byte) 0x29,
            (byte) 0x20, (byte) 0x55, (byte) 0x62, (byte) 0x75, (byte) 0x6e, (byte) 0x74,
            (byte) 0x75, (byte) 0x20, (byte) 0x43, (byte) 0x68, (byte) 0x72, (byte) 0x6f,
            (byte) 0x6d, (byte) 0x69, (byte) 0x75, (byte) 0x6d, (byte) 0x2f, (byte) 0x33,
            (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x32, (byte) 0x30,
            (byte) 0x36, (byte) 0x32, (byte) 0x2e, (byte) 0x31, (byte) 0x32, (byte) 0x30,
            (byte) 0x20, (byte) 0x43, (byte) 0x68, (byte) 0x72, (byte) 0x6f, (byte) 0x6d,
            (byte) 0x65, (byte) 0x2f, (byte) 0x33, (byte) 0x37, (byte) 0x2e, (byte) 0x30,
            (byte) 0x2e, (byte) 0x32, (byte) 0x30, (byte) 0x36, (byte) 0x32, (byte) 0x2e,
            (byte) 0x31, (byte) 0x32, (byte) 0x30, (byte) 0x20, (byte) 0x53, (byte) 0x61,
            (byte) 0x66, (byte) 0x61, (byte) 0x72, (byte) 0x69, (byte) 0x2f, (byte) 0x35,
            (byte) 0x33, (byte) 0x37, (byte) 0x2e, (byte) 0x33, (byte) 0x36, (byte) 0x00,
            (byte) 0xa0, (byte) 0x0d, (byte) 0x00, (byte) 0x26, (byte) 0x68, (byte) 0x74,
            (byte) 0x74, (byte) 0x70, (byte) 0x3a, (byte) 0x2f, (byte) 0x2f, (byte) 0x31,
            (byte) 0x32, (byte) 0x37, (byte) 0x2e, (byte) 0x30, (byte) 0x2e, (byte) 0x30,
            (byte) 0x2e, (byte) 0x31, (byte) 0x3a, (byte) 0x38, (byte) 0x30, (byte) 0x31,
            (byte) 0x30, (byte) 0x2f, (byte) 0x73, (byte) 0x65, (byte) 0x61, (byte) 0x72,
            (byte) 0x63, (byte) 0x68, (byte) 0x2f, (byte) 0x3f, (byte) 0x71, (byte) 0x3d,
            (byte) 0x71, (byte) 0x71, (byte) 0x71, (byte) 0x71, (byte) 0x71, (byte) 0x71,
            (byte) 0x00, (byte) 0xa0, (byte) 0x03, (byte) 0x00, (byte) 0x11, (byte) 0x67,
            (byte) 0x7a, (byte) 0x69, (byte) 0x70, (byte) 0x2c, (byte) 0x64, (byte) 0x65,
            (byte) 0x66, (byte) 0x6c, (byte) 0x61, (byte) 0x74, (byte) 0x65, (byte) 0x2c,
            (byte) 0x73, (byte) 0x64, (byte) 0x63, (byte) 0x68, (byte) 0x00, (byte) 0xa0,
            (byte) 0x04, (byte) 0x00, (byte) 0x17, (byte) 0x65, (byte) 0x6e, (byte) 0x2d,
            (byte) 0x55, (byte) 0x53, (byte) 0x2c, (byte) 0x65, (byte) 0x6e, (byte) 0x3b,
            (byte) 0x71, (byte) 0x3d, (byte) 0x30, (byte) 0x2e, (byte) 0x38, (byte) 0x2c,
            (byte) 0x69, (byte) 0x74, (byte) 0x3b, (byte) 0x71, (byte) 0x3d, (byte) 0x30,
            (byte) 0x2e, (byte) 0x36, (byte) 0x00, (byte) 0xa0, (byte) 0x09, (byte) 0x00,
            (byte) 0xb7, (byte) 0x4a, (byte) 0x53, (byte) 0x45, (byte) 0x53, (byte) 0x53,
            (byte) 0x49, (byte) 0x4f, (byte) 0x4e, (byte) 0x49, (byte) 0x44, (byte) 0x2e,
            (byte) 0x38, (byte) 0x39, (byte) 0x61, (byte) 0x66, (byte) 0x30, (byte) 0x38,
            (byte) 0x34, (byte) 0x30, (byte) 0x3d, (byte) 0x31, (byte) 0x6f, (byte) 0x6a,
            (byte) 0x7a, (byte) 0x31, (byte) 0x67, (byte) 0x66, (byte) 0x32, (byte) 0x78,
            (byte) 0x36, (byte) 0x36, (byte) 0x36, (byte) 0x65, (byte) 0x6b, (byte) 0x78,
            (byte) 0x37, (byte) 0x65, (byte) 0x68, (byte) 0x73, (byte) 0x6f, (byte) 0x70,
            (byte) 0x36, (byte) 0x76, (byte) 0x39, (byte) 0x61, (byte) 0x3b, (byte) 0x20,
            (byte) 0x4a, (byte) 0x53, (byte) 0x45, (byte) 0x53, (byte) 0x53, (byte) 0x49,
            (byte) 0x4f, (byte) 0x4e, (byte) 0x49, (byte) 0x44, (byte) 0x2e, (byte) 0x36,
            (byte) 0x36, (byte) 0x32, (byte) 0x37, (byte) 0x66, (byte) 0x62, (byte) 0x64,
            (byte) 0x38, (byte) 0x3d, (byte) 0x31, (byte) 0x66, (byte) 0x66, (byte) 0x36,
            (byte) 0x63, (byte) 0x33, (byte) 0x38, (byte) 0x75, (byte) 0x35, (byte) 0x64,
            (byte) 0x6c, (byte) 0x67, (byte) 0x68, (byte) 0x31, (byte) 0x74, (byte) 0x6d,
            (byte) 0x35, (byte) 0x39, (byte) 0x38, (byte) 0x6d, (byte) 0x66, (byte) 0x71,
            (byte) 0x33, (byte) 0x68, (byte) 0x30, (byte) 0x71, (byte) 0x3b, (byte) 0x20,
            (byte) 0x69, (byte) 0x63, (byte) 0x6f, (byte) 0x6e, (byte) 0x53, (byte) 0x69,
            (byte) 0x7a, (byte) 0x65, (byte) 0x3d, (byte) 0x32, (byte) 0x34, (byte) 0x78,
            (byte) 0x32, (byte) 0x34, (byte) 0x3b, (byte) 0x20, (byte) 0x4a, (byte) 0x53,
            (byte) 0x45, (byte) 0x53, (byte) 0x53, (byte) 0x49, (byte) 0x4f, (byte) 0x4e,
            (byte) 0x49, (byte) 0x44, (byte) 0x2e, (byte) 0x38, (byte) 0x66, (byte) 0x65,
            (byte) 0x39, (byte) 0x35, (byte) 0x34, (byte) 0x61, (byte) 0x36, (byte) 0x3d,
            (byte) 0x31, (byte) 0x72, (byte) 0x6a, (byte) 0x78, (byte) 0x36, (byte) 0x75,
            (byte) 0x6c, (byte) 0x35, (byte) 0x6f, (byte) 0x63, (byte) 0x36, (byte) 0x62,
            (byte) 0x30, (byte) 0x62, (byte) 0x6f, (byte) 0x79, (byte) 0x32, (byte) 0x6c,
            (byte) 0x32, (byte) 0x77, (byte) 0x69, (byte) 0x38, (byte) 0x67, (byte) 0x6f,
            (byte) 0x6a, (byte) 0x3b, (byte) 0x20, (byte) 0x73, (byte) 0x63, (byte) 0x72,
            (byte) 0x65, (byte) 0x65, (byte) 0x6e, (byte) 0x52, (byte) 0x65, (byte) 0x73,
            (byte) 0x6f, (byte) 0x6c, (byte) 0x75, (byte) 0x74, (byte) 0x69, (byte) 0x6f,
            (byte) 0x6e, (byte) 0x3d, (byte) 0x31, (byte) 0x36, (byte) 0x30, (byte) 0x30,
            (byte) 0x78, (byte) 0x39, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x05,
            (byte) 0x00, (byte) 0x06, (byte) 0x71, (byte) 0x3d, (byte) 0x41, (byte) 0x41,
            (byte) 0x41, (byte) 0x41, (byte) 0x00, (byte) 0x0a, (byte) 0x00, (byte) 0x0f,
            (byte) 0x41, (byte) 0x4a, (byte) 0x50, (byte) 0x5f, (byte) 0x52, (byte) 0x45,
            (byte) 0x4d, (byte) 0x4f, (byte) 0x54, (byte) 0x45, (byte) 0x5f, (byte) 0x50,
            (byte) 0x4f, (byte) 0x52, (byte) 0x54, (byte) 0x00, (byte) 0x00, (byte) 0x05,
            (byte) 0x34, (byte) 0x31, (byte) 0x36, (byte) 0x32, (byte) 0x35, (byte) 0x00,
            (byte) 0xff};
        AjpMessage msg = AjpReader.parseMessage(forwardRequestAnotherGet);
        assertThat(msg, instanceOf(ForwardRequestMessage.class));
        assertThat(msg.getDescription(), is("Begin the request-processing cycle with the following data.\n"
                + "Method: 2\n"
                + "Protocol: HTTP/1.1\n"
                + "RequestUri: /search/\n"
                + "RemoteAddr: 127.0.0.1\n"
                + "RemoteHost: \n"
                + "ServerName: 127.0.0.1\n"
                + "ServerPort: 8010\n"
                + "isSsl: false\n"
                + "Header: host 127.0.0.1:8010\n"
                + "Header: connection keep-alive\n"
                + "Header: accept text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n"
                + "Header: user-agent Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36\n"
                + "Header: referer http://127.0.0.1:8010/search/?q=qqqqqq\n"
                + "Header: accept-encoding gzip,deflate,sdch\n"
                + "Header: accept-language en-US,en;q=0.8,it;q=0.6\n"
                + "Header: cookie JSESSIONID.89af0840=1ojz1gf2x666ekx7ehsop6v9a; JSESSIONID.6627fbd8=1ff6c38u5dlgh1tm598mfq3h0q; iconSize=24x24; JSESSIONID.8fe954a6=1rjx6ul5oc6b0boy2l2wi8goj; screenResolution=1600x900\n"
                + "Attribute: query_string q=AAAA\n"
                + "Attribute: AJP_REMOTE_PORT 41625\n"));
    }
}